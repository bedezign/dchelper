#!/usr/bin/env php
<?php

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (is_readable($file)) {
        $autoloader = require($file);
    }
}

if (!class_exists('\DCHelper\Commands\Command')) {
    die('It seems we are unable to locate the auto-loader.' . PHP_EOL);
}

$commands = [];
switch (di('arguments')[0] ?? '') {
    case 'up' :
        $commands = [
            \DCHelper\Commands\RemoteIPs::class,                // Register IP aliases for services with remote ips
            \DCHelper\Commands\DeProxy::class,                  // Cleanup old tcp tunnel processes
            \DCHelper\Commands\Hosts::class,                    // See if we need to update the hosts file
            \DCHelper\Commands\Up::class,                       // Pass control to docker-compose to "up" the project
            \DCHelper\Commands\Proxy::class,                    // Setup new tcp tunnel processes
        ];
        break;

    case 'down':
        $commands = [\DCHelper\Commands\Down::class, \DCHelper\Commands\DeProxy::class];
        break;

    case 'start' :
        $commands = [\DCHelper\Commands\RemoteIPs::class, \DCHelper\Commands\Start::class];
        break;

    case 'hosts' :
        $commands = [\DCHelper\Commands\Hosts::class];
        break;

    case 'proxy':
        $commands = [\DCHelper\Commands\DeProxy::class, \DCHelper\Commands\Proxy::class];
        break;

    case 'shell':
        $commands = [\DCHelper\Commands\Shell::class];
        break;

    case 'help':
        $commands = [\DCHelper\Commands\Help::class];

        // Was a specific command requested?
        $about = array_get(di('arguments'), 1);
        if ($about) {
            $commands = [$commands, $about];
        }

        break;
}

// Determine which if the commands can run
$runnable = [];
foreach ($commands as $index => $class) {
    $arguments = [];
    if (is_array($class)) {
        list($class, $arguments) = $class;
        if (!is_array($arguments)) {
            $arguments = [$arguments];
        }
    }

    /** @var \DCHelper\Commands\CommandInterface $command */
    $command = new $class;
    if ($command->shouldRun()) {
        $runnable[] = [$command, $arguments];
    }
}

// Anything to do?
$commands = $runnable;
if (!$commands) {

    if (count($argv) === 1) {
        // Special case: no arguments shows the help, but ends with exit code 1
        (new \DCHelper\Commands\Help())->run();
        die(1);
    }

    // Nothing we recognize, pass on whatever commandline we got to docker-compose
    ($command = new DCHelper\Tools\External\DockerCompose())->mustRun(false)->passthru(true)->run(implode(' ', array_slice($argv, 1)));
    die($command->exit);
}

// Pre- and append the helpers
if ($stage = di('arguments')[0]) {
    $helpers = new \DCHelper\Commands\Helpers();
    array_unshift($commands, [$helpers, ['pre.' . $stage]]);
    $commands[] = [$helpers, ['post.' . $stage]];
}

// Actually perform all commands
try {
    foreach ($commands as list($command, $arguments)) {
        $command->run(...$arguments);
    }
} catch (\DCHelper\Exceptions\CommandFailedException $e) {
    error($e->getMessage());
    die(1);
} catch (\Symfony\Component\Process\Exception\ProcessFailedException $e) {
    $process = $e->getProcess();
    error(sprintf('The command "%s" failed with exit code: %s(%s)',
        $process->getCommandLine(),
        $process->getExitCode(),
        $process->getExitCodeText()
    ));
    die(1);
}

function setupDI()
{

}
